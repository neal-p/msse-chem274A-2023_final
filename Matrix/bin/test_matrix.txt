
#############################################################
# 3. Acessing/modifying elements by paranthesis operator
#############################################################

initial value of m_i4(0, 0) = 0
after modifying, m_i4(0, 0) = 10
initial value of m_i4(1, 1) = 0
after modifying, m_i4(1, 1) = 50

#############################################################
# 4. Reshaping Matrix
#############################################################

Grow m_i4 from 4x4 to 4x8
Before: 
[10, 0, 0, 0, 
0, 50, 0, 0, 
0, 0, 0, 0, 
0, 0, 0, 0, 
]

After: 
[10, 0, 0, 0, 0, 50, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
]


#############################################################
# 5. Matrix Operations
#############################################################


#############################################################
# 5.1. Matrix Addition
#############################################################

Add 2x2 matrix of 1s to itself
Matrix Before: 
[1, 1, 
1, 1, 
]

Matrix After: 
[2, 2, 
2, 2, 
]


#############################################################
# 5.2. Matrix Multiplication
#############################################################

Matrix A: 
[1, 2, 3, 
4, 5, 6, 
]

Matrix B: 
[7, 8, 
9, 10, 
11, 12, 
]

Using NAIVE implementation: 
A X B: 
[58, 64, 
139, 154, 
]

Using BLAS implementation: 
A X B: 
[58, 64, 
139, 154, 
]


#############################################################
# 5.3. Elementwise Matrix Multiplication
#############################################################

Matrix A: 
[1, 2, 3, 
4, 5, 6, 
]

Matrix B: 
[7, 8, 9, 
10, 11, 12, 
]

Elementwise A X B: 
[7, 16, 
27, 40, 
55, 72, 
]


#############################################################
# 5.4. Assignment via = operator
#############################################################

Matrix A: 
[1, 2, 3, 
4, 5, 6, 
]

Matrix B: 
[7, 8, 9, 
10, 11, 12, 
]

Assign A = B
A: 
[7, 8, 9, 
10, 11, 12, 
]


#############################################################
# 5.5. Fill array
#############################################################

A before: 
[7, 8, 9, 
10, 11, 12, 
]

A .fill(5): 
[5, 5, 5, 
5, 5, 5, 
]

A = 10.0: 
[10, 10, 10, 
10, 10, 10, 
]


#############################################################
# 5.6. Compare matrices
#############################################################

Matrix A: 
[10, 10, 10, 
10, 10, 10, 
]

Matrix B: 
[7, 8, 9, 
10, 11, 12, 
]

Matrix C: 
[7, 8, 9, 
10, 11, 12, 
]

A == B: 0
B == C: 1

#############################################################
# 5.8. Get transpose
#############################################################

Matrix A: 
[10, 10, 10, 
10, 10, 10, 
]

Transposed A: 
[10, 10, 
10, 10, 
10, 10, 
]

Matrix B: 
[7, 8, 9, 
10, 11, 12, 
]

Transposed B: 
[7, 10, 
8, 11, 
9, 12, 
]


#############################################################
# 5.9. Get complex conjugate
#############################################################

Matrix A: 
[10, 10, 10, 
10, 10, 10, 
]

Complex conjugate A: 
[10, 10, 10, 
10, 10, 10, 
]

Matrix D: 
[(1,1), (1,-1), 
(5,0.1), (5,-1.5), 
]

Complex conjugate D: 
[(1,-1), (1,1), 
(5,-0.1), (5,1.5), 
]


#############################################################
# 5.10. Get conjugate transpose
#############################################################

Matrix A: 
[10, 10, 10, 
10, 10, 10, 
]

Conjugate transpose A: 
[10, 10, 
10, 10, 
10, 10, 
]

Matrix D: 
[(1,1), (1,-1), 
(5,0.1), (5,-1.5), 
]

Conjugate transpose D: 
[(1,-1), (1,1), 
(5,-0.1), (5,1.5), 
]


#############################################################
# 5.11. Inplace operations
#############################################################

Matrix D: 
[(1,1), (1,-1), 
(5,0.1), (5,-1.5), 
]

D.tp_ip()
Matrix D: 
[(1,1), (5,0.1), 
(1,-1), (5,-1.5), 
]

D.ccj_ip()
Matrix D: 
[(1,-1), (5,-0.1), 
(1,1), (5,1.5), 
]

D.ct_ip()
Matrix D: 
[(1,1), (1,-1), 
(5,0.1), (5,-1.5), 
]


#############################################################
# 5.12. Bonus eigenvalue operations
#############################################################

Matrix: 
[-1.01, 0.86, -4.6, 3.31, -4.81, 
3.98, 0.53, -7.04, 5.29, 3.55, 
3.3, 8.26, -3.89, 8.2, -1.51, 
4.43, 4.96, -7.66, -7.33, 6.18, 
7.31, -6.43, -6.16, 2.47, 5.58, 
]

Eigenvalues
[(2.85813,10.7627), (2.85813,-10.7627), (-0.686675,4.70426), (-0.686675,-4.70426), (-10.4629,0), 
]

left Eigenvectors
[(0.0444124,0.287919), (0.0444124,-0.287919), (-0.132561,-0.327285), (-0.132561,0.327285), (0.0408373,0), 
(0.618164,0), (0.618164,-0), (0.68687,0), (0.68687,-0), (0.559954,0), 
(-0.0357576,-0.577111), (-0.0357576,0.577111), (-0.390328,-0.0748664), (-0.390328,0.0748664), (-0.1285,0), 
(0.283726,0.0113547), (0.283726,-0.0113547), (-0.0182009,-0.187269), (-0.0182009,0.187269), (-0.796699,0), 
(-0.0449534,0.340612), (-0.0449534,-0.340612), (-0.403218,0.218118), (-0.403218,-0.218118), (0.183143,0), 
]

right Eigenvectors
[(0.108065,0.168648), (0.108065,-0.168648), (0.732234,0), (0.732234,-0), (0.460646,0), 
(0.406313,-0.25901), (0.406313,0.25901), (-0.026463,-0.0169468), (-0.026463,0.0169468), (0.337704,0), 
(0.102358,-0.508802), (0.102358,0.508802), (0.191649,-0.292566), (0.191649,0.292566), (0.308744,0), 
(0.398631,-0.0913335), (0.398631,0.0913335), (-0.0790111,-0.0780759), (-0.0790111,0.0780759), (-0.743846,0), 
(0.539535,0), (0.539535,-0), (-0.291605,-0.493102), (-0.291605,0.493102), (0.158529,0), 
]

